class Solution {
public:
    int jump(vector<int>& nums) {
        // EDGE CASE
        if (nums.size() == 1) return 0;

        // Initialize variables:
        // `jumps` counts the number of jumps needed.
        // `currentEnd` is the farthest we can reach with the current number of jumps.
        // `farthest` is the farthest we can reach with the next jump.
        int jumps = 1, currentEnd = nums[0], farthest = 0 + nums[0];
        
        // Iterate over the array (but not including the last element)
        for (int i = 1; i < nums.size() - 1; ++i) {
            // Update the farthest we can reach from the current position
            farthest = max(farthest, i + nums[i]);
            
            // If we've reached the end of the range we can reach with the current jump,
            // we need to make another jump.
            if (i == currentEnd) {
                jumps++;          // Increment the number of jumps
                currentEnd = farthest;  // Update the end of the range for the next jump
                
                // Early exit: if the current end is at or beyond the last index, return the jumps
                if (currentEnd >= nums.size() - 1) break;
            }
        }
        
        return jumps;  // Return the total number of jumps needed
    }
};